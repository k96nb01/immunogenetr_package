
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "immunogenetr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "immunogenetr-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('immunogenetr')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("GLstring_expand_longer")
> ### * GLstring_expand_longer
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GLstring_expand_longer
> ### Title: GLstring_expand_longer
> ### Aliases: GLstring_expand_longer
> 
> ### ** Examples
> 
> GL_string <- "HLA-A*01:01:01:01/HLA-A*01:02/HLA-A*01:03/HLA-A
+   *01:95+HLA-A*24:02:01:01|HLA-A*01:01:01:01/HLA-A*01:03+HLA-A*24:03:01:01
+   ^HLA-B*07:01:01+B*15:01:01/B*15:02:01|B*07:03+B*15:99:01^HLA-DRB1*03:01:02
+   ~HLA-DRB5*01:01:01+HLA-KIR2DL5A*0010101+HLA-KIR2DL5A*0010201?
+   HLA-KIR2DL5B*0010201+HLA-KIR2DL5B*0010301"
> result <- GLstring_expand_longer(GL_string)
> print(result)
# A tibble: 19 × 8
   value          entry possible_gene_location locus genotype_ambiguity genotype
   <chr>          <int>                  <int> <int>              <int>    <int>
 1 "HLA-A*01:01:…     1                      1     1                  1        1
 2 "HLA-A*01:02"      1                      1     1                  1        1
 3 "HLA-A*01:03"      1                      1     1                  1        1
 4 "HLA-A\n  *01…     1                      1     1                  1        1
 5 "HLA-A*24:02:…     1                      1     1                  1        2
 6 "HLA-A*01:01:…     1                      1     1                  2        1
 7 "HLA-A*01:03"      1                      1     1                  2        1
 8 "HLA-A*24:03:…     1                      1     1                  2        2
 9 "HLA-B*07:01:…     1                      1     2                  1        1
10 "B*15:01:01"       1                      1     2                  1        2
11 "B*15:02:01"       1                      1     2                  1        2
12 "B*07:03"          1                      1     2                  2        1
13 "B*15:99:01"       1                      1     2                  2        2
14 "HLA-DRB1*03:…     1                      1     3                  1        1
15 "HLA-DRB5*01:…     1                      1     3                  1        1
16 "HLA-KIR2DL5A…     1                      1     3                  1        2
17 "HLA-KIR2DL5A…     1                      1     3                  1        3
18 "\n  HLA-KIR2…     1                      2     1                  1        1
19 "HLA-KIR2DL5B…     1                      2     1                  1        2
# ℹ 2 more variables: haplotype <int>, allele <int>
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GLstring_expand_longer", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("GLstring_gene_copies_combine")
> ### * GLstring_gene_copies_combine
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GLstring_gene_copies_combine
> ### Title: GLstring_gene_copies_combine
> ### Aliases: GLstring_gene_copies_combine
> 
> ### ** Examples
> 
> HLA_type <- data.frame(
+   sample = c("sample1", "sample2"),
+   HLA_A1 = c("HLA-A*01:01", "HLA-A*02:01"),
+   HLA_A2 = c("HLA-A*01:02", "HLA-A*02:02"),
+   stringsAsFactors = FALSE
+ )
> GLstring_gene_copies_combine(HLA_type, columns = c("HLA_A1", "HLA_A2"))
# A tibble: 2 × 2
  sample  HLA_A                  
  <chr>   <chr>                  
1 sample1 HLA-A*01:01+HLA-A*01:02
2 sample2 HLA-A*02:01+HLA-A*02:02
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GLstring_gene_copies_combine", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("GLstring_genes")
> ### * GLstring_genes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GLstring_genes
> ### Title: GLstring_genes
> ### Aliases: GLstring_genes
> 
> ### ** Examples
> 
> table <- data.frame(
+   GL_string = "HLA-A*29:02+HLA-A*30:02^HLA-C*06:02+HLA-C*07:01^HLA-B*
+   08:01+HLA-B*13:02^HLA-DRB4*01:03+HLA-DRB4*01:03^HLA-DRB1*04:01+HLA-DRB1*07:01",
+   stringsAsFactors = FALSE
+ )
> GLstring_genes(table, "GL_string")
# A tibble: 1 × 5
  HLA_A                   HLA_C                   HLA_B        HLA_DRB4 HLA_DRB1
  <chr>                   <chr>                   <chr>        <chr>    <chr>   
1 HLA-A*29:02+HLA-A*30:02 HLA-C*06:02+HLA-C*07:01 "HLA-B*\n  … HLA-DRB… HLA-DRB…
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GLstring_genes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("GLstring_genes_expanded")
> ### * GLstring_genes_expanded
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GLstring_genes_expanded
> ### Title: GLstring_genes_expanded
> ### Aliases: GLstring_genes_expanded
> 
> ### ** Examples
> 
> table <- data.frame(
+ GL_string = "HLA-A*29:02+HLA-A*30:02^HLA-C*06:02+HLA-C*07:01^
+ HLA-B*08:01+HLA-B*13:02^HLA-DRB4*01:03+HLA-DRB4*01:03^HLA-DRB1*04:01+HLA-DRB1*07:01",
+ stringsAsFactors = FALSE
+ )
> 
> GLstring_genes_expanded(table, "GL_string")
# A tibble: 2 × 5
  A           C           B               DRB4           DRB1          
  <chr>       <chr>       <chr>           <chr>          <chr>         
1 HLA-A*29:02 HLA-C*06:02 "\nHLA-B*08:01" HLA-DRB4*01:03 HLA-DRB1*04:01
2 HLA-A*30:02 HLA-C*07:01 "HLA-B*13:02"   HLA-DRB4*01:03 HLA-DRB1*07:01
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GLstring_genes_expanded", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("GLstring_genotype_ambiguity")
> ### * GLstring_genotype_ambiguity
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GLstring_genotype_ambiguity
> ### Title: GLstring_genotype_ambiguity
> ### Aliases: GLstring_genotype_ambiguity
> 
> ### ** Examples
> 
> HLA_type <- data.frame(
+ sample = c("sample1", "sample2"),
+ HLA_A = c("A*01:01+A*68:01|A*01:02+A*68:55|A*01:99+A*68:66", "A*02:01+A*03:01|A*02:02+A*03:03"),
+ HLA_B = c("B*07:02+B*58:01|B*07:03+B*58:09", "B*08:01+B*15:01|B*08:02+B*15:17"),
+ stringsAsFactors = FALSE
+ )
> 
> GLstring_genotype_ambiguity(HLA_type, columns = c("HLA_A", "HLA_B"), keep_ambiguities = TRUE)
   sample           HLA_A           HLA_B        HLA_A_genotype_ambiguity
1 sample1 A*01:01+A*68:01 B*07:02+B*58:01 A*01:02+A*68:55|A*01:99+A*68:66
2 sample2 A*02:01+A*03:01 B*08:01+B*15:01                 A*02:02+A*03:03
  HLA_B_genotype_ambiguity
1          B*07:03+B*58:09
2          B*08:02+B*15:17
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GLstring_genotype_ambiguity", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("GLstring_regex")
> ### * GLstring_regex
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GLstring_regex
> ### Title: GLstring_regex
> ### Aliases: GLstring_regex
> 
> ### ** Examples
> 
> allele <- "HLA-A*02:01"
> GLstring_regex(allele)
[1] "HLA-A\\*02:01(?=(\\?|\\^|\\||\\+|\\~|/|$))"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GLstring_regex", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("HLA_column_repair")
> ### * HLA_column_repair
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: HLA_column_repair
> ### Title: HLA_column_repair
> ### Aliases: HLA_column_repair
> 
> ### ** Examples
> 
> HLA_type <- data.frame(
+ "HLA-A*" = c("01:01", "02:01"),
+ "HLA-B*" = c("07:02", "08:01"),
+ "HLA-C*" = c("03:04", "04:01"),
+ stringsAsFactors = FALSE
+ )
> 
> HLA_column_repair(HLA_type, format = "tidyverse")
  HLA.A. HLA.B. HLA.C.
1  01:01  07:02  03:04
2  02:01  08:01  04:01
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("HLA_column_repair", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("HLA_columns_to_GLstring")
> ### * HLA_columns_to_GLstring
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: HLA_columns_to_GLstring
> ### Title: HLA_columns_to_GLstring
> ### Aliases: HLA_columns_to_GLstring
> 
> ### ** Examples
> 
> typing_table <- data.frame(
+ patient = c("patient1", "patient2", "patient3"),
+ mA1cd = c("A*01:01", "A*02:01", "A*03:01"),
+ mA2cd = c("A*11:01", "blank", "A*26:01"),
+ mB1cd = c("B*07:02", "B*08:01", "B*15:01"),
+ mB2cd = c("B*44:02", "B*40:01", "-"),
+ mC1cd = c("C*03:04", "C*04:01", "C*05:01"),
+ mC2cd = c("C*07:01", "C*07:02", "C*08:01"),
+ stringsAsFactors = FALSE
+ )
> 
> typing_table$GL_string <- HLA_columns_to_GLstring(typing_table, HLA_typing_columns =
+ c("mA1cd", "mA2cd", "mB1cd", "mB2cd", "mC1cd", "mC2cd"),
+ prefix_to_remove = "m", suffix_to_remove = "cd")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("HLA_columns_to_GLstring", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("HLA_match_number")
> ### * HLA_match_number
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: HLA_match_number
> ### Title: HLA_match_number
> ### Aliases: HLA_match_number
> 
> ### ** Examples
> 
> # Example recipient and donor GL strings
> GL_string_recip <- "HLA-A*01:01+HLA-A*02:01^HLA-B*07:02+HLA-B*08:01"
> GL_string_donor <- "HLA-A*01:01+HLA-A*03:01^HLA-B*07:02+HLA-B*44:02"
> loci <- c("HLA-A", "HLA-B")
> 
> # Calculate mismatch numbers (Host vs. Graft)
> HLA_match_number(GL_string_recip, GL_string_donor, loci, direction = "HvG")
[1] "HLA-A=1, HLA-B=1"
> 
> # Calculate mismatch numbers (Graft vs. Host)
> HLA_match_number(GL_string_recip, GL_string_donor, loci, direction = "GvH")
[1] "HLA-A=1, HLA-B=1"
> 
> # Calculate mismatch numbers (Bidirectional)
> HLA_match_number(GL_string_recip, GL_string_donor,
+ loci, direction = "bidirectional")
[1] "HLA-A=1, HLA-B=1"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("HLA_match_number", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("HLA_match_summary_HCT")
> ### * HLA_match_summary_HCT
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: HLA_match_summary_HCT
> ### Title: HLA_match_summary_HCT
> ### Aliases: HLA_match_summary_HCT
> 
> ### ** Examples
> 
> # Example recipient and donor GL strings
> GL_string_recip <- "HLA-A*29:02^HLA-C*06:02+HLA-C*07:01^HLA-B*08:01+HLA-B*13:02
+ ^HLA-DRB1*04:01+HLA-DRB1*07:01^HLA-DQB1*02:02+HLA-DQB1*03:02"
> GL_string_donor <- "HLA-A*02:01+HLA-A*29:02^HLA-C*06:01+HLA-C*07:02^
+ HLA-B*08:01+HLA-B*13:03^HLA-DRB1*04:01+HLA-DRB1*07:01^HLA-DQB1*02:02+HLA-DQB1*03:02"
> 
> # Calculate mismatch numbers
> HLA_match_summary_HCT(GL_string_recip, GL_string_donor,
+ direction = "bidirectional", match_grade = "Xof8")
Error in `map2_chr()`:
ℹ In index: 1.
Caused by error in `.f()`:
! Either the recipient and/or donor GL strings are missing these loci: HLA-B
Backtrace:
     ▆
  1. ├─immunogenetr::HLA_match_summary_HCT(...)
  2. │ ├─... %>% distinct(case, match_sum)
  3. │ └─tibble::tibble(...)
  4. │   └─tibble:::tibble_quos(xs, .rows, .name_repair)
  5. │     └─rlang::eval_tidy(xs[[j]], mask)
  6. ├─dplyr::distinct(., case, match_sum)
  7. ├─dplyr::mutate(., match_sum = sum(matches), .by = case)
  8. ├─dplyr::mutate(., matches = as.integer(matches))
  9. ├─tidyr::separate_wider_delim(...)
 10. │ └─tidyr:::check_data_frame(data)
 11. │   └─base::is.data.frame(x)
 12. ├─tidyr::separate_longer_delim(., matches, delim = ", ")
 13. │ └─tidyr:::check_data_frame(data)
 14. │   └─base::is.data.frame(x)
 15. ├─dplyr::mutate(., case = row_number())
 16. ├─immunogenetr::HLA_match_number(...)
 17. │ ├─... %>% ...
 18. │ └─tibble::tibble(...)
 19. │   └─tibble:::tibble_quos(xs, .rows, .name_repair)
 20. │     └─rlang::eval_tidy(xs[[j]], mask)
 21. ├─dplyr::summarise(...)
 22. ├─tidyr::unite(., locus, matches, col = "Matches", sep = "=")
 23. ├─dplyr::select(., -mismatches)
 24. ├─dplyr::mutate(., matches = 2 - mismatches)
 25. ├─dplyr::mutate(., mismatches = as.integer(mismatches))
 26. ├─tidyr::separate_wider_delim(...)
 27. │ └─tidyr:::check_data_frame(data)
 28. │   └─base::is.data.frame(x)
 29. ├─tidyr::separate_longer_delim(., mismatch, delim = ", ")
 30. │ └─tidyr:::check_data_frame(data)
 31. │   └─base::is.data.frame(x)
 32. ├─dplyr::mutate(., case = row_number())
 33. ├─immunogenetr::HLA_mismatch_number(...)
 34. │ ├─... %>% select(-mismatches)
 35. │ └─tibble::tibble(...)
 36. │   └─tibble:::tibble_quos(xs, .rows, .name_repair)
 37. │     └─rlang::eval_tidy(xs[[j]], mask)
 38. ├─dplyr::select(., -mismatches)
 39. ├─dplyr::mutate(...)
 40. ├─dplyr::mutate(., mismatches = na_if(mismatches, "NA"))
 41. ├─tidyr::separate_wider_delim(...)
 42. │ └─tidyr:::check_data_frame(data)
 43. │   └─base::is.data.frame(x)
 44. ├─tidyr::separate_longer_delim(., HvG, delim = ", ")
 45. │ └─tidyr:::check_data_frame(data)
 46. │   └─base::is.data.frame(x)
 47. ├─dplyr::mutate(., case = row_number())
 48. ├─immunogenetr::HLA_mismatch_base(...)
 49. │ └─purrr::map2_chr(GL_string_recip, GL_string_donor, process_pair)
 50. │   └─purrr:::map2_("character", .x, .y, .f, ..., .progress = .progress)
 51. │     ├─purrr:::with_indexed_errors(...)
 52. │     │ └─base::withCallingHandlers(...)
 53. │     ├─purrr:::call_with_cleanup(...)
 54. │     └─immunogenetr (local) .f(.x[[i]], .y[[i]], ...)
 55. │       └─base::stop(...)
 56. └─base::.handleSimpleError(...)
 57.   └─purrr (local) h(simpleError(msg, call))
 58.     └─cli::cli_abort(...)
 59.       └─rlang::abort(...)
Execution halted
