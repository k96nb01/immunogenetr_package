---
title: "Overview of the immunogenetr package"
format: html
---

## immunogenetr: an HLA data wrangling package for R

Immunogenetics is the study of the major histocompatbility complex (MHC). The human MHC is called HLA, which has serologic and molecular nomenclatures define by the World Health Organization (WHO; references). Beyond the WHO-defined nomenclature, the genotype list string (GL string) is a standard for encoding HLA genotypes, with standard delimiters for encoding multiple loci, gene copies, ambiguities, etc. (reference). HLA genotype data from primary sources, including clinical laboratory information systems or research databases, are often stored in a variety of formats. The goal of the immunogenetr package is to provide a set of functions for coercing HLA data into a standard format: the GL string. Other functions then perform common tasks, such as mismatch determination, or separation of loci to individual columns, from the GL string. Various other functions allow for further wrangling of HLA data. This package relies heavily on functions from, and adheres to concepts of, the tidyverse (reference). It is envisioned that immunogenetr will allow for the rapid and accurate wrangling of HLA data for downstream analysis.

This document will provide an overview of the functions and their intended use.

```{r}
#| eval: FALSE
# The current package can be installed from github

library(devtools)

install_github("k96nb01/immunogenetr_package", force = TRUE)
```


### Importing wild-caught data

One of the most common formats for HLA genotype data is in spreadsheet-like table where each row represents a case and each column a single allele of one of the HLA loci. See below for examples of this type of wild-caught data.

```{r}
library(data.table)
library(tidyverse)

test1 <- read.csv("tests/test1.csv")
test4 <- read.csv("tests/test4.csv")

print(test1)
print(test4)
```

Note that in the first example, the DRB3, DRB4, and DRB5 loci are encoded in two columns, corresponding to one locus, while in the second, each of these loci has two columns for the two possible alleles. In both examples, column names contain "1" and "2" suffixes to indicate gene copies, while the second example has other suffixes and prefixes in the column names of the loci. The `HLA_column_to_GLstring` function was written to coerce these disparate formats to a standard GL string:

```{r}
library(tidyverse)
library(immunogenetr)

test1 %>% mutate(GL_string = HLA_columns_to_GLstring(., patient, c(A1:DPB1_2)))
```

For the second example, the `prefix_to_remove` and `suffix_to_remove` arguments ensure the function accurately determines the loci for each column:

```{r}
library(tidyverse)
library(immunogenetr)

test4 %>% mutate(GL_string = HLA_columns_to_GLstring(., patient, c(mA1Cd.recipient:mDPB12cd.recipient), prefix_to_remove = "m", suffix_to_remove = "Cd.recipient"))
```

This function also allows for the ability to coerce serologic typing to a GL string. While the GL string was not intended to contain serologic results, the format will accommodate it, and allow for downstream functions to act on serologic data:

```{r}
library(tidyverse)
library(immunogenetr)

(test_a <- tribble(
  ~case, ~"a1", ~"a2", ~"drw1", ~"drw2", ~"cw1", ~"cw2",
  1, "1", "2", "51", "52", "1", "15",
  2, "2", "3", "53", "blank", "10", "blank",
  3, "2", NA, "51", "51", "3", NA,
  4, "68", NA, NA, "53", "5", "17"
  ))

(test_a %>% mutate(GL_string = HLA_columns_to_GLstring(., case, c(a1:cw2), serologic = TRUE)))
```

In addition to making GL strings from data stored in individual columns, I also have a function to read the GL string from an HML file. I haven't uploaded this yet, though, as I need to get a deidentified HML file that I can upload as a test.

### Working with GL strings

For working with GL strings, there are functions to parse them. The first would be to separate genes (loci):

```{r}
library(tidyverse)
library(immunogenetr)

(test <- tribble(
  ~case, ~string, 
  1, "HLA-A*02:01+HLA-A*29:02^HLA-B*44:03+HLA-B*49:01^HLA-C*07:01+HLA-C*16:01^HLA-DRB1*04:05+HLA-DRB1*07:01^HLA-DRB4*01:01+HLA-DRB4*01:03^HLA-DQA1*02:01+HLA-DQA1*03:03^HLA-DQB1*02:02+HLA-DQB1*03:02^HLA-DPA1*01:03+HLA-DPA1*02:01^HLA-DPB1*11:01+HLA-DPB1*104:01	", 
  2, "HLA-A*03:01+HLA-A*68:01^HLA-C*07:01+HLA-C*07:02^HLA-DPA1*01:03+HLA-DPA1*01:03^HLA-DPB1*04:02+HLA-DPB1*04:02^HLA-DQA1*01:02+HLA-DQA1*05:05^HLA-DQB1*03:01+HLA-DQB1*05:02^HLA-DRB1*15:01+HLA-DRB1*12:01^HLA-DRB3*02:02^HLA-DRB5*01:01+HLA-DRB5*01:01", 
  3, "HLA-A*02:01:01^HLA-E*01:02", 
  4, "HLA-A*02:01:01+HLA-A*32:01:01^MICA*001:01+MICA*008:01^MICB*001:01", 
  ))

test %>% GLstring_genes(string)
```

Gene copies can be separated into two columns:

```{r}
library(tidyverse)
library(immunogenetr)

# This function needs to be uploaded.
```

Other functions will deal with ambiguities either by keeping the first ambiguity and discarding the others, or placing the other ambiguities into a different column. These functions need to be uploaded.

The `HLA_truncate` function takes molecular typing and truncates it to a specified number of fields. This is useful for performing matching between alleles that may be at different resolution. Currently the function works only on a single allele, but we plan to update it to work on all alleles in a GL string.

```{r}
library(tidyverse)
library(immunogenetr)

"A*02:01:02:03N" %>% HLA_truncate(fields = 2, keep_suffix = TRUE)
```

### Matching/Mismatching

Performing matching, or determining mismatches, is a common need for HLA data. We are developing a set of functions to perform matching. Busra has started with the HvG functions:

```{r}
library(tidyverse)
library(immunogenetr)

recip_genotype <- "HLA-A*01:01+HLA-A*02:01"
donor_genotype <- "HLA-A*02:01+HLA-A*03:01"

HLA_mismatch_HvG(recip_genotype, donor_genotype, "A") # The first function gives a logical output if a mismatch is present.
HLA_mismatch_number_HvG(recip_genotype, donor_genotype, "A") # The `number` function gives an integer [0-2] as the output.
HLA_mismatch_alleles_HvG(recip_genotype, donor_genotype, "A") # The `alleles` function give the mismatched allele(s) as the output.
```

Once we finalize how these mismatching functions work, we plan to write functions for GvH direction mismatches, as well as solid organ mismatching (which will just be an alias for HvG). We will also have to write matching functions. Matching functions will require both GvH, HvG and bidirectional matching. These functions can serve as the basis for high-level functions, for example a BMT matching function that would take "X/8" as an argument and perform matching at the HLA-A, B, C, and DRB1 loci.

One question I have is how to handle ambiguity in the matching and mismatching functions. Some examples:

```{r}
recip_genotype <- "HLA-DPB1*03:01+HLA-DPB1*04:01"
donor_genotype <- "HLA-DPB1*03:01+HLA-DPB1*04:01/HLA-DPB1*126:01"
```

I think it's pretty clear that if we saw this result clinically, for example when reviewing a deceased donor typing report, we would conclude that there is not a mismatch. However, if the real donor typing is HLA-DPB1\*03:01+HLA-DPB1\*126:01, then it would be a mismatch. Except, if we perform matching at the G group level, then it would not be a mismatch. For this reason I think it is best to have these simple match/mismatch functions require an unambiguous GL string, and rely on the researcher to perform imputation or P group-level translation first, as any assumption we build into these functions may not be the correct.

